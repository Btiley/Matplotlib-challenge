{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Observations and Insights "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>38.825898</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>10</td>\n",
       "      <td>35.014271</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "      <td>34.223992</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>20</td>\n",
       "      <td>32.997729</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Mouse ID Drug Regimen   Sex  Age_months  Weight (g)  Timepoint  \\\n",
       "0     k403     Ramicane  Male          21          16          0   \n",
       "1     k403     Ramicane  Male          21          16          5   \n",
       "2     k403     Ramicane  Male          21          16         10   \n",
       "3     k403     Ramicane  Male          21          16         15   \n",
       "4     k403     Ramicane  Male          21          16         20   \n",
       "\n",
       "   Tumor Volume (mm3)  Metastatic Sites  \n",
       "0           45.000000                 0  \n",
       "1           38.825898                 0  \n",
       "2           35.014271                 1  \n",
       "3           34.223992                 1  \n",
       "4           32.997729                 1  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dependencies and Setup\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "\n",
    "# Study data files\n",
    "mouse_metadata_path = \"data/Mouse_metadata.csv\"\n",
    "study_results_path = \"data/Study_results.csv\"\n",
    "\n",
    "# Read the mouse data and the study results\n",
    "mouse_metadata = pd.read_csv(mouse_metadata_path)\n",
    "study_results = pd.read_csv(study_results_path)\n",
    "\n",
    "# Combine the data into a single dataset\n",
    "Mouse_Data = pd.merge(mouse_metadata,study_results)\n",
    "\n",
    "Mouse_Data.head()\n",
    "# Display the data table for preview\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "249"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the number of mice.\n",
    "Count = total = len(Mouse_Data[\"Mouse ID\"].unique())\n",
    "Count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>38.825898</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>10</td>\n",
       "      <td>35.014271</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "      <td>34.223992</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>20</td>\n",
       "      <td>32.997729</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Mouse ID Drug Regimen   Sex  Age_months  Weight (g)  Timepoint  \\\n",
       "0     k403     Ramicane  Male          21          16          0   \n",
       "1     k403     Ramicane  Male          21          16          5   \n",
       "2     k403     Ramicane  Male          21          16         10   \n",
       "3     k403     Ramicane  Male          21          16         15   \n",
       "4     k403     Ramicane  Male          21          16         20   \n",
       "\n",
       "   Tumor Volume (mm3)  Metastatic Sites  \n",
       "0           45.000000                 0  \n",
       "1           38.825898                 0  \n",
       "2           35.014271                 1  \n",
       "3           34.223992                 1  \n",
       "4           32.997729                 1  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting the duplicate mice by ID number that shows up for Mouse ID and Timepoint. \n",
    "#Duplicates = Mouse_Data.groupby(['Mouse ID'])\n",
    "#Duplicates\n",
    "clean_data_df = Mouse_Data[Mouse_Data[\"Mouse ID\"] != \"g989\"]\n",
    "clean_data_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Optional: Get all the data for the duplicate mouse ID. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a clean DataFrame by dropping the duplicate mouse by its ID.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "248"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the number of mice in the clean DataFrame.\n",
    "len(clean_data_df[\"Mouse ID\"].unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              T Vol Mean  T Vol median  T Vol Variance  \\\n",
      "Drug Regimen                                             \n",
      "Capomulin          40.68         41.56           24.95   \n",
      "Ceftamin           52.59         51.78           39.29   \n",
      "Infubinol          52.88         51.82           43.13   \n",
      "Ketapril           55.24         53.70           68.55   \n",
      "Naftisol           54.33         52.51           66.17   \n",
      "Placebo            54.03         52.29           61.17   \n",
      "Propriva           52.32         50.45           43.85   \n",
      "Ramicane           40.22         40.67           23.49   \n",
      "Stelasyn           54.23         52.43           59.45   \n",
      "Zoniferol          53.24         51.82           48.53   \n",
      "\n",
      "              T Vol Standard Deviation  T Vol SEM  \n",
      "Drug Regimen                                       \n",
      "Capomulin                         4.99       0.33  \n",
      "Ceftamin                          6.27       0.47  \n",
      "Infubinol                         6.57       0.49  \n",
      "Ketapril                          8.28       0.60  \n",
      "Naftisol                          8.13       0.60  \n",
      "Placebo                           7.82       0.58  \n",
      "Propriva                          6.62       0.54  \n",
      "Ramicane                          4.85       0.32  \n",
      "Stelasyn                          7.71       0.57  \n",
      "Zoniferol                         6.97       0.52  \n"
     ]
    }
   ],
   "source": [
    "# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the tumor volume for each regimen\n",
    "\n",
    "# This method is the most straighforward, creating multiple series and putting them all together at the end.\n",
    "\n",
    "#Grouping by Regimen\n",
    "\n",
    "Reg = clean_data_df.groupby(['Drug Regimen'])\n",
    "\n",
    "#Selecting Tumor Volume column\n",
    "\n",
    "t_vol = Reg[\"Tumor Volume (mm3)\"]\n",
    "\n",
    "#Mean\n",
    "t_mean = round(t_vol.mean(),2)\n",
    "\n",
    "#Median\n",
    "t_median = round(t_vol.median(),2)\n",
    "\n",
    "#Variance\n",
    "t_var = round(t_vol.var(),2)\n",
    "\n",
    "#Standard deviation\n",
    "t_std = round(t_vol.std(),2)\n",
    "\n",
    "#SEM\n",
    "t_sem = round(t_vol.sem(),2) \n",
    "\n",
    "\n",
    "T_Data = pd.DataFrame({\"T Vol Mean\": t_mean,\n",
    "                       \"T Vol median\": t_median,\n",
    "                       \"T Vol Variance\":t_var,\n",
    "                       \"T Vol Standard Deviation\": t_std,\n",
    "                       \"T Vol SEM\": t_sem})\n",
    "print(T_Data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "      <th>var</th>\n",
       "      <th>std</th>\n",
       "      <th>sem</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Capomulin</th>\n",
       "      <td>40.68</td>\n",
       "      <td>41.56</td>\n",
       "      <td>24.95</td>\n",
       "      <td>4.99</td>\n",
       "      <td>0.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ceftamin</th>\n",
       "      <td>52.59</td>\n",
       "      <td>51.78</td>\n",
       "      <td>39.29</td>\n",
       "      <td>6.27</td>\n",
       "      <td>0.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Infubinol</th>\n",
       "      <td>52.88</td>\n",
       "      <td>51.82</td>\n",
       "      <td>43.13</td>\n",
       "      <td>6.57</td>\n",
       "      <td>0.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ketapril</th>\n",
       "      <td>55.24</td>\n",
       "      <td>53.70</td>\n",
       "      <td>68.55</td>\n",
       "      <td>8.28</td>\n",
       "      <td>0.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Naftisol</th>\n",
       "      <td>54.33</td>\n",
       "      <td>52.51</td>\n",
       "      <td>66.17</td>\n",
       "      <td>8.13</td>\n",
       "      <td>0.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Placebo</th>\n",
       "      <td>54.03</td>\n",
       "      <td>52.29</td>\n",
       "      <td>61.17</td>\n",
       "      <td>7.82</td>\n",
       "      <td>0.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Propriva</th>\n",
       "      <td>52.32</td>\n",
       "      <td>50.45</td>\n",
       "      <td>43.85</td>\n",
       "      <td>6.62</td>\n",
       "      <td>0.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ramicane</th>\n",
       "      <td>40.22</td>\n",
       "      <td>40.67</td>\n",
       "      <td>23.49</td>\n",
       "      <td>4.85</td>\n",
       "      <td>0.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stelasyn</th>\n",
       "      <td>54.23</td>\n",
       "      <td>52.43</td>\n",
       "      <td>59.45</td>\n",
       "      <td>7.71</td>\n",
       "      <td>0.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zoniferol</th>\n",
       "      <td>53.24</td>\n",
       "      <td>51.82</td>\n",
       "      <td>48.53</td>\n",
       "      <td>6.97</td>\n",
       "      <td>0.52</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               mean  median    var   std   sem\n",
       "Drug Regimen                                  \n",
       "Capomulin     40.68   41.56  24.95  4.99  0.33\n",
       "Ceftamin      52.59   51.78  39.29  6.27  0.47\n",
       "Infubinol     52.88   51.82  43.13  6.57  0.49\n",
       "Ketapril      55.24   53.70  68.55  8.28  0.60\n",
       "Naftisol      54.33   52.51  66.17  8.13  0.60\n",
       "Placebo       54.03   52.29  61.17  7.82  0.58\n",
       "Propriva      52.32   50.45  43.85  6.62  0.54\n",
       "Ramicane      40.22   40.67  23.49  4.85  0.32\n",
       "Stelasyn      54.23   52.43  59.45  7.71  0.57\n",
       "Zoniferol     53.24   51.82  48.53  6.97  0.52"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the tumor volume for each regimen\n",
    "Reg_agg = clean_data_df.groupby(['Drug Regimen']).agg(['mean','median','var','std', 'sem'])\n",
    "round(Reg_agg[\"Tumor Volume (mm3)\"],2)\n",
    "\n",
    "# This method produces everything in a single groupby function\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bar and Pie Charts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a bar plot showing the total number of mice for each treatment throughout the course of the study using pandas. \n",
    "#Groupby Treatment (Drug Regimen?) using pandas\n",
    "#Unique Mice\n",
    "Mice = clean_data_df.groupby(['Drug Regimen']).nunique()\n",
    "x = [\"Ca\",\"Ce\",\"In\",\"Ke\",\"Na\",\"Pl\",\"Pr\",\"Ra\",\"St\",\"Zo\"]\n",
    "\n",
    "y = Mice[\"Mouse ID\"]\n",
    "\n",
    "plt.bar(x,y,color='r', alpha=0.5, align=\"center\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate a bar plot showing the total number of mice for each treatment throughout the course of the study using pyplot.\n",
    "# Groupby treatment using pyplot\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pandas\n",
    "#Groupby Male/Female using pyplot\n",
    "Mice_Gender = clean_data_df.groupby(['Sex']).nunique()\n",
    "labels = [\"Female\", \"Male\"]\n",
    "sizes = Mice_Gender[\"Mouse ID\"]\n",
    "fig1, ax1 = plt.subplots()\n",
    "ax1.pie(sizes,labels=labels)\n",
    "ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Female</th>\n",
       "      <td>123</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>14</td>\n",
       "      <td>10</td>\n",
       "      <td>800</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Male</th>\n",
       "      <td>125</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>14</td>\n",
       "      <td>10</td>\n",
       "      <td>834</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Mouse ID  Drug Regimen  Sex  Age_months  Weight (g)  Timepoint  \\\n",
       "Sex                                                                      \n",
       "Female       123            10    1          24          14         10   \n",
       "Male         125            10    1          24          14         10   \n",
       "\n",
       "        Tumor Volume (mm3)  Metastatic Sites  \n",
       "Sex                                           \n",
       "Female                 800                 5  \n",
       "Male                   834                 5  "
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pyplot\n",
    "#Groupby Male/Female and pie plot with pyplot\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quartiles, Outliers and Boxplots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the final tumor volume of each mouse across four of the treatment regimens:  \n",
    "# Capomulin, Ramicane, Infubinol, and Ceftamin\n",
    "#Tumor vol at time point 20 for each treatment\n",
    "\n",
    "# Start by getting the last (greatest) timepoint for each mouse\n",
    "\n",
    "\n",
    "# Merge this group df with the original dataframe to get the tumor volume at the last timepoint\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Put treatments into a list for for loop (and later for plot labels)\n",
    "\n",
    "\n",
    "# Create empty list to fill with tumor vol data (for plotting)\n",
    "\n",
    "\n",
    "# Calculate the IQR and quantitatively determine if there are any potential outliers. \n",
    "\n",
    "    \n",
    "    # Locate the rows which contain mice on each drug and get the tumor volumes\n",
    "    \n",
    "    \n",
    "    # add subset \n",
    "    \n",
    "    \n",
    "    # Determine outliers using upper and lower bounds\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate a box plot of the final tumor volume of each mouse across four regimens of interest\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Line and Scatter Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate a line plot of time point versus tumor volume for a mouse treated with Capomulin\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate a scatter plot of mouse weight versus average tumor volume for the Capomulin regimen\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Correlation and Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the correlation coefficient and linear regression model \n",
    "# for mouse weight and average tumor volume for the Capomulin regimen\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
